#####PYTHON TRAINING CHUCK

# INSTALL
 - Windows, Mac or Linux
 - Install python3
 - create folder
 - Install IDE - ATOM works for all OS, same VSC
 - Create file first.py in directory
 - Run file from directory or CLI
 - Create note files in python

 Python is basically words, sentences & paragraphs of code
 reserved words for python:
 False
 None
 True
 and
 as
 assert
 break
 class
 continue
 def
 del
 elif
 else
 except
 finally
 for
 from
 global
 if
 import
 in
 is
 lambda
 nonlocal
 not
 or
 pass
 raise
 return
 try
 while
 with
 yield 


# VARIABLES, EXPRESSION & STATEMENTS


test

testing github push

GIT = SOFTWARE THAT PUSH, PULLS & COMMITS CHANGES TO FILES FROM LOCAL REPO TO EXTERNAL REPO (GITHUB, BITBUCKET, ETC..)

GIT HUB = EXTERNAL REPO ON THE WEB, BITBUCKET, ETC... MANY PRODUCTS SOURCE TREE LOCAL GIT PROGRAM.. CAN USE ANY PROGRAM TO MAKE CHANGES WITH GIT OR CLI

CI/CD - VSC > JENKINS > GIT > EXTERNAL REPO - CONTINUIUS INTERGRATION AND DEVELOPMENT OF CODE CHANGES AND TESTING

*** OPEN SOURCE CONTROL IS VSCODE OR EXTERNAL APP *** ADD NOTES & PUSH ***


PROGRESS 01282023 - VARIABLES, EXPRESSIONS AND STATEMENTS 

45:00 

git test Windows

python - make sure interpreter is working - run python file from directory

reserved words= python syntax words vocabulary (class )

Variables - whatever word we use 

interractive python - use statements for testin
script - write the program

sequence of steps - type the steps and python runs iter
conditional steps - more intelligent sequence of steps using (if) statements
repeated steps - steps over and over again (loops)

constants - fixed values number,letters that don't change

keep variables simple and meaning

variable - word we choose 
operator - = 
assignement - value for variable

x = 3.9 

CHAPTER 2 

expressions - 

operators - () + - / * **

"type" asks variable types

# Comments are ignored by python #

# Get the name of the file and open it
name = input('Enter file:')
handle = open(name, 'r')

CHAPTER 3 - CONDITIONAL EXECUTION

paragraphs of code with the if statement. run the code and if we find something run that code
if not move to the next lines of code

if, then else conditions statement = check something in the code 


git changes - enter message in box before commit

stage > commit > sync 

code blocks and indents key to paragraphed code. visualize flow of if then logic

COMPLEX CONDITIONAL EXECUTIONS

*clone git repo* pull, commit and push changes* 

repo - github, bitbucket etc..
git - git CLI, bamboo, bithub etc..


CHAPTER 4 - FUNCTIONS 

Store and reuse 

def = store the defined function 

def thing():
print ('Hello') 
print ('Fun') 

invoke (call) the function to use: 

print thing()

def greet(lang):
    if lang == 'es': 
       return 'Hola'
elif lang == 'fr'
      return 'Bonjour'
else:
     return 'Hello'

>>> print(greet('en'), 'Glenn')
>>> Hello Glenn

To function or not to function.....

* used for long and complex forms of code where things are being used over nad over again


CHAPTER 5: LOOPS AND ITERATIONS 

Python loops are used to execute a set of instructions repeatedly. There are two types of loops in Python: for loop and while loop.

A 'for' loop is used to iterate over a sequence of elements and execute a block of code for each element in the sequence.

A 'while' loop is used to repeatedly execute a block of code as long as a condition is true.

Both types of loops can be used to iterate over lists, tuples, strings, and other types of collections in Python.

# Example of for loop
numbers = [1, 2, 3, 4, 5]
for num in numbers:
    print(num)

# Output: 
# 1
# 2
# 3
# 4
# 5

# Example of while loop
count = 0
while count < 5:
    print(count)
    count += 1

# Output:
# 0
# 1
# 2
# 3
# 4

sudo ./ubuntu-gdm-set-background --image /usr/share/backgrounds/sf.jpg


CHAPTER 6 - strings

my_string = "Hello, World!"

In this example, my_string is a variable that holds a string value, which is the text "Hello, World!". The string is enclosed in double quotes, which tells Python that it's a string. You can use single quotes instead of double quotes to create a string as well. Here's an example using single quotes:

my_other_string = 'Python is fun!'

Both of these strings can be manipulated using Python's built-in string methods and operators. For example, you can concatenate strings using the + operator:

combined_string = my_string + " " + my_other_string
print(combined_string)  # Output: "Hello, World! Python is fun!"

network_devices = "routers", "firewalls", "wlc's" 



CHAPTER 7 - READING FILES 

To read files in Python, you can use the built-in open() function. The open() function returns a file object, which can be used to read, write or modify the contents of a file. Here's an example of how to use open() to read a file:
.txt .csv any data files etc..



# Open a file for reading
file = open('example.txt', 'r')

# Read the contents of the file
file_contents = file.read()

# Close the file
file.close()

# Print the contents of the file
print(file_contents)

In this example, we're opening a file called example.txt in read mode ('r'). We then read the contents of the file into a variable called file_contents using the read() method of the file object. Finally, we close the file using the close() method.

Note that it's good practice to always close files after you're done working with them, as this frees up system resources and ensures that any changes you've made to the file are saved.

You can also use a with statement when opening a file, which automatically closes the file when you're done with it. Here's an example:

# Open a file using a with statement
with open('example.txt', 'r') as file:
    # Read the contents of the file
    file_contents = file.read()

# The file is automatically closed when the with block is exited
print(file_contents)



CHAPTER 8 - lists (data strutures)

In Python, a list is a data structure that holds an ordered collection of items. Lists are mutable, which means that you can add, remove, or modify elements in the list after it has been created.

Here's an example of how to create a list in Python:

# Create a list of numbers
numbers = [1, 2, 3, 4, 5]

# Create a list of strings
fruits = ['apple', 'banana', 'orange', 'kiwi']

In this example, we've created two lists: numbers and fruits. The numbers list contains integers, while the fruits list contains strings.

You can access individual elements of a list using their index. In Python, list indices start at 0. Here's an example:

# Access the first element of the numbers list
first_number = numbers[0]

# Access the third element of the fruits list
third_fruit = fruits[2]

In this example, we're accessing the first element of the numbers list (which has an index of 0) and the third element of the fruits list (which has an index of 2).

You can add elements to a list using the append() method. Here's an example:

# Add a new element to the numbers list
numbers.append(6)

# Add a new element to the fruits list
fruits.append('grape')

In this example, we're using the append() method to add a new element to each list.

You can remove elements from a list using the remove() method. Here's an example:

# Remove the second element from the numbers list
numbers.remove(2)

# Remove the first element from the fruits list
del fruits[0]

In this example, we're using the remove() method to remove the second element from the numbers list and the del statement to remove the first element from the fruits list.

These are just a few of the basic operations you can perform with lists in Python. There are many more built-in methods and functions you can use to manipulate lists, depending on your needs.

03062023 3:50 - LISTS CHAPTER 8 

splitting lists and breaking up data in list


CHAPTER 9  - DICTIONARIES 

Lists with a key value label 

student = {"name": "John", "age": 20, "major": "Computer Science"}

Example - Counting words in text file:

lab - words.txt words.py - understand everything, counts words in file 

* This example allows you to input whatever file you want to anazlyze the code *

words.py   option to enter any txt file name you want 


CHAPTER 10 - TUPLES 

Similari to list use () not []

'immutable' can modify a list, cannot modify tuple 

holds a value and a key 'car':honda 'color':red etc...

In Python, a tuple is a collection of ordered and immutable elements, enclosed in parentheses ( ). Here's an example of how to create a tuple in 

*REVIEW BOOK QUESTIONS & LABS**

## CHAPTER 11 - REGULAR EXPRESSIONS 

Just like everything in computers (bgp,cucm,python,linux grep,cisco) regex match something in the strings

*, all etc.. 

smart searching "regex" wildcards & patterns *,

pain but fun to use 

a language in themselves , from the 60's 

quick guide 

https://www.regular-expressions.info/quickstart.html

import libary for expressions

import re 



#### CHAPTER 12 - NETWORK PROGRAMS 

Talking to network resources with Python 

Stacks - (TCP) transport connections example 

TCP Connections / Sockets between devices and applications 

host >> webserver as an example 

import socket (libary to communicate with sockets on hosts)

Application Protocol 
http, 80, mail, www. etc..

*Let's write a web browser!

python script is a cli version of a web browser

Connects to the server url and prints the text file 

socket1.py 

*url lib better*

ASCII 

UTF-8 best practice best character 

6:54 - 03062023

decoding bytes - encoding and decoding 

make http easier with urllib - does all the socket stuff 

urllib - does all the docket work 

import urllib.request, urllib.parse, urllib.error

python crawling website and can grab links or whatever you want 

urllib1 - looks at words in .txt file
urllib2 - looks at html coding 
urlwords - counts words in .txt 

Parsing HTML - WEB SCRAPING  - pull data from web sites and pull content 

could block you if see scraping website 

library beautiful soup - looks at website and cleans up broken links
from bs4 import BeautifulSoup

urlwords.py - scrape website 

sudo pip3 install beautifulsoup4

*** REVIEW NETWORKING SCRIPTS OF DEVICES ** PYTHON DBOMBEL ** ANSIBLE CHATGPT**
*** INFOBLOX TRAINING***

** USE LIBRARIES **

BEAUTIFUL SOUP - WEB SCRAPING 
*PANDAS* - DATA ANALYSIS
PyPDF2 - PDF manipulation 
pygame - games 
network devices - paramiko, netmiko,
django - web framework written in python 

pip3 install *libaryname*

### CHAPTER 13 - USING WEB SERVICES 

better formats - .xml .json - very common now 

serialization - taking data from one format and translating to another format

XML - marking up data

7:30 - 03132023 











